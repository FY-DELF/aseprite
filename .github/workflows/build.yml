name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        build_type: [RelWithDebInfo, Debug]
        ui: [gui, cli]
        scripting: [lua, noscripts]
        exclude:
          - build_type: Debug
            ui: gui
          - build_type: RelWithDebInfo
            ui: cli
          - build_type: RelWithDebInfo
            scripting: noscripts
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Install Dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
          libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev
    - name: Install Skia
      if: ${{ matrix.ui == 'gui' }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          choco install wget -y --no-progress
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip
          unzip Skia-Windows-Release-x64.zip -d skia
        elif [[ "${{ runner.os }}" == "macOS" ]] ; then
          ARCH=$(uname -m)
          # 根据架构选择正确的 Skia 版本
          if [[ "$ARCH" == "arm64" ]]; then
            SKIA_URL="https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-macOS-Release-arm64.zip"
          else
            SKIA_URL="https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-macOS-Release-x64.zip"
          fi
          wget $SKIA_URL
          unzip Skia-macOS-*.zip -d skia
          # 验证解压后的库文件路径
          echo "=== Skia Library Files ==="
          find skia -name "*.dylib"
        else
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Linux-Release-x64-libstdc++.zip
          unzip Skia-Linux-Release-x64-libstdc++.zip -d skia
        fi
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      with:
        key: ${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.scripting }}-${{ matrix.build_type }}
    - uses: aseprite/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi

        if [[ "${{ matrix.ui }}" == "gui" ]] ; then
          export laf_backend=skia
        else
          export laf_backend=none
        fi

        if [[ "${{ matrix.scripting }}" == "lua" ]] ; then
          export enable_scripting=on
        else
          export enable_scripting=off
        fi

        if [[ "${{ runner.os }}" == "macOS" ]] ; then
          export skia_arch=arm64
        else
          export skia_arch=x64
        fi

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_SCRIPTING=$enable_scripting \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR=skia \
          -DSKIA_LIBRARY_DIR=skia/out/Release-$skia_arch
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    # 新增步骤：复制Skia库到构建目录
    - name: Copy Skia Libraries
      if: ${{ matrix.ui == 'gui' && runner.os == 'macOS' }}
      shell: bash
      run: |
        ARCH=$(uname -m)
        if [[ "$ARCH" == "arm64" ]]; then
          SKIA_DIR="Release-arm64"
        else
          SKIA_DIR="Release-x64"
        fi
        echo "=== Copying Skia Libraries from $SKIA_DIR ==="
        mkdir -p build/bin
        cp -v skia/out/$SKIA_DIR/*.dylib build/bin/
        ls -l build/bin/*.dylib
    - name: Fix RPATH (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        ASEPRITE_PATH="build/bin/aseprite"
        if [ ! -f "$ASEPRITE_PATH" ]; then
          ASEPRITE_PATH="build/aseprite.app/Contents/MacOS/aseprite"
        fi
        if [ -f "$ASEPRITE_PATH" ]; then
          install_name_tool -add_rpath @executable_path $ASEPRITE_PATH
        else
          echo "Error: aseprite executable not found!"
          exit 1
        fi
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/bin/**
          build/aseprite*
          build/aseprite.app/**
