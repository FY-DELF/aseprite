name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        build_type: [RelWithDebInfo]
        ui: [gui]
        scripting: [lua]
        exclude:
          - build_type: Debug
            ui: gui
          - build_type: RelWithDebInfo
            ui: cli
          - build_type: RelWithDebInfo
            scripting: noscripts
    steps:
    - uses: actions/checkout@v4
    
    - name: Clean Workspace
      run: rm -rf skia depot_tools
      
    - name: Install Dependencies
      if: runner.os == 'macOS'
      run: |
        # 1. 强制清理 Homebrew 环境
        brew cleanup -s
        rm -rf $(brew --cache)
        brew update-reset
        brew update

        # 2. 仅安装核心依赖（禁止关联安装）
        brew install \
          --force-bottle \          # 强制使用预编译二进制
          --ignore-dependencies \   # 跳过所有依赖检查
          python git ninja pkg-config \
          libwebp libjpeg-turbo harfbuzz freetype

        # 3. 安装构建工具链
        sudo rm -rf /Library/Developer/CommandLineTools
        sudo xcode-select --install
        sudo xcodebuild -license accept
        
    - name: Build Skia
      if: ${{ matrix.ui == 'gui' && runner.os == 'macOS' }}
      run: |
        if [[ $(sysctl -n hw.optional.arm64) == "1" ]]; then
          SKIA_ARCH="arm64"
        else
          SKIA_ARCH="x64"
        fi
  
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        export PATH="$PATH:$(pwd)/depot_tools"
  
        git clone --depth 1 https://github.com/aseprite/skia.git
        cd skia
        python tools/git-sync-deps
  
        bin/gn gen out/Release-$SKIA_ARCH --args="
          is_official_build=true
          is_debug=false
          target_cpu=\"$SKIA_ARCH\"
          skia_use_system_libjpeg_turbo=true
          skia_use_system_harfbuzz=true
          skia_use_system_libwebp=true
          skia_use_system_freetype2=true
        "
        ninja -C out/Release-$SKIA_ARCH -v
        
    - name: Copy Skia Libraries
      if: ${{ matrix.ui == 'gui' && runner.os == 'macOS' }}
      shell: bash
      run: |
        if [[ $(sysctl -n hw.optional.arm64) == "1" ]]; then
          SKIA_DIR="Release-arm64"
        else
          SKIA_DIR="Release-x64"
        fi
        echo "=== Copying Skia Libraries from $SKIA_DIR ==="
        mkdir -p build/bin
        cp -v skia/out/$SKIA_DIR/*.dylib build/bin/
        ls -l build/bin/*.dylib

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      with:
        key: ${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.scripting }}-${{ matrix.build_type }}
    - uses: aseprite/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
      
    - name: Generating Makefiles
      shell: bash
      run: |
        # 定义必要变量
        if [[ "${{ matrix.ui }}" == "gui" ]]; then
          export laf_backend=skia
        else
          export laf_backend=none
        fi

        if [[ "${{ matrix.scripting }}" == "lua" ]]; then
          export enable_scripting=on
        else
          export enable_scripting=off
        fi

        # 动态路径设置
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          if [[ $(sysctl -n hw.optional.arm64) == "1" ]]; then
            SKIA_LIB_DIR="skia/out/Release-arm64"
          else
            SKIA_LIB_DIR="skia/out/Release-x64"
          fi
        else
          SKIA_LIB_DIR="skia/out/Release-x64"
        fi

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_SCRIPTING=$enable_scripting \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR=skia \
          -DSKIA_LIBRARY_DIR=$SKIA_LIB_DIR
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja

    - name: Fix RPATH (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        ASEPRITE_PATH="build/bin/aseprite"
        if [ ! -f "$ASEPRITE_PATH" ]; then
          ASEPRITE_PATH="build/aseprite.app/Contents/MacOS/aseprite"
        fi
        if [ -f "$ASEPRITE_PATH" ]; then
          install_name_tool -add_rpath @executable_path $ASEPRITE_PATH
        else
          echo "Error: aseprite executable not found!"
          exit 1
        fi
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/bin/**
          build/aseprite*
          build/aseprite.app/**
